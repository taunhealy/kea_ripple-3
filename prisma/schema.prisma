// Existing auth models remain unchanged
model User {
  id                String      @id @default(cuid())
  name              String?
  email             String      @unique
  emailVerified     DateTime?
  image             String?
  username          String?     @unique
  websiteUrl        String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  stripeAccountId   String?     @unique
  role              UserRole    @default(PROVIDER)
  businessName      String?
  businessAddress   String?
  phoneNumber       String?
  vatNumber         String?
  activities        Activity[]
  bookings         Booking[]
  reviews          Review[]
  Account           Account[]
  Session          Session[]
}

enum UserRole {
  ADMIN
  PROVIDER
  CUSTOMER
}

model Activity {
  id              String        @id @default(cuid())
  title           String
  description     String        @db.Text
  shortDescription String?      @db.Text
  duration        Int           // in minutes
  maxParticipants Int
  minParticipants Int          @default(1)
  price           Decimal       @db.Decimal(10,2)
  currency        String        @default("USD")
  location        Location?     @relation(fields: [locationId], references: [id])
  locationId      String?
  provider        User          @relation(fields: [providerId], references: [id])
  providerId      String
  category        Category      @relation(fields: [categoryId], references: [id])
  categoryId      String
  images          ActivityImage[]
  requirements    String?       @db.Text
  included        String[]      // What's included in the price
  excluded        String[]      // What's not included
  cancellationPolicy CancellationPolicy @default(FLEXIBLE)
  status          ActivityStatus @default(ACTIVE)
  schedules       Schedule[]
  bookings        Booking[]
  reviews         Review[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  tags            String[]
  featured        Boolean       @default(false)
  averageRating   Float?
  totalReviews    Int          @default(0)

  @@index([providerId])
  @@index([categoryId])
  @@index([locationId])
  @@fulltext([title, description])
}

model Location {
  id          String     @id @default(cuid())
  name        String
  address     String
  city        String
  state       String?
  country     String
  postalCode  String?
  latitude    Float
  longitude   Float
  activities  Activity[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([city, country])
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  image       String?
  activities  Activity[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELLED
}

// Add to User model
model User {
  subscriptionStatus SubscriptionStatus @default(TRIAL)
  subscriptionEnds  DateTime?
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      NotificationType
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

enum NotificationType {
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  PAYMENT_RECEIVED
  REVIEW_RECEIVED
  SCHEDULE_REMINDER
}

model Pack {
  id          String    @id @default(cuid())
  activity    Activity  @relation(fields: [activityId], references: [id])
  activityId  String
  title       String
  description String?   @db.Text
  sessions    Int       // Number of sessions
  validityDays Int     // Days pack is valid for
  price       Decimal  @db.Decimal(10,2)
  schedules   Schedule[]
  bookings    Booking[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([activityId])
}

model Schedule {
  id              String    @id @default(cuid())
  activity        Activity  @relation(fields: [activityId], references: [id])
  activityId      String
  startDate       DateTime
  endDate         DateTime
  startTime       DateTime
  endTime         DateTime
  daysOfWeek      Int[]     // 0-6 for Sunday-Saturday
  maxParticipants Int
  price           Decimal?  @db.Decimal(10,2) // Override activity price if needed
  isRecurring     Boolean   @default(false)
  recurringUntil  DateTime?
  bookings        Booking[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([activityId])
  @@index([startDate, endDate])
}

model Booking {
  id              String          @id @default(cuid())
  user            User            @relation(fields: [userId], references: [id])
  userId          String
  activity        Activity        @relation(fields: [activityId], references: [id])
  activityId      String
  schedule        Schedule        @relation(fields: [scheduleId], references: [id])
  scheduleId      String
  participants    Int
  totalPrice      Decimal         @db.Decimal(10,2)
  status          BookingStatus   @default(PENDING)
  paymentStatus   PaymentStatus   @default(PENDING)
  paymentIntent   String?         // Stripe payment intent ID
  specialRequests String?
  contactDetails  Json?           // Additional contact details
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([userId])
  @@index([activityId])
  @@index([scheduleId])
}

model ActivityImage {
  id          String   @id @default(cuid())
  activity    Activity @relation(fields: [activityId], references: [id])
  activityId  String
  url         String
  alt         String?
  isPrimary   Boolean  @default(false)
  order       Int      @default(0)
  createdAt   DateTime @default(now())

  @@index([activityId])
}

model Review {
  id          String   @id @default(cuid())
  activity    Activity @relation(fields: [activityId], references: [id])
  activityId  String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  rating      Int      @db.SmallInt
  comment     String?  @db.Text
  response    String?  @db.Text
  status      ReviewStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([activityId])
  @@index([userId])
}

enum ActivityStatus {
  DRAFT
  ACTIVE
  PAUSED
  DELETED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum CancellationPolicy {
  FLEXIBLE      // Full refund 24h prior
  MODERATE      // Full refund 5 days prior
  STRICT        // 50% refund 7 days prior
  NON_REFUNDABLE
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

model Payment {
  id          String        @id @default(cuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  amount      Decimal      @db.Decimal(10,2)
  currency    String       @default("ZAR")
  status      PaymentStatus
  type        PaymentType
  description String
  invoiceUrl  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
}

enum PaymentType {
  SUBSCRIPTION
  BOOKING
  REFUND
}

model SubscriptionUsage {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  month          DateTime
  bookingsCount  Int      @default(0)
  usagePercentage Float   @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, month])
  @@index([userId])
}

model NotificationPreferences {
  id                String   @id @default(cuid())
  user              User     @relation(fields: [userId], references: [id])
  userId            String   @unique
  emailNotifications Boolean  @default(true)
  usageAlerts       Boolean  @default(true)
  usageThreshold    Int      @default(80)
  paymentReminders  Boolean  @default(true)
  weeklyReports     Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
}