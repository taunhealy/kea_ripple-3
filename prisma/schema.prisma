generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Cart {
  id        String     @id
  userId    String
  type      CartType   @default(CART)
  createdAt DateTime   @default(now())
  updatedAt DateTime
  User      User       @relation(fields: [userId], references: [id])
  CartItem  CartItem[]

  @@unique([userId, type])
}

model CartItem {
  id               String            @id
  cartId           String
  quantity         Int               @default(1)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
  packId           String?
  presetId         String?
  itemType         ItemType
  Cart             Cart              @relation(fields: [cartId], references: [id])
  PresetPackUpload PresetPackUpload? @relation(fields: [packId], references: [id])
  PresetUpload     PresetUpload?     @relation(fields: [presetId], references: [id])
  PriceHistory     PriceHistory[]

  @@unique([cartId, presetId, packId])
  @@index([cartId])
  @@index([packId])
  @@index([presetId])
}

model Genre {
  id               String             @id
  name             String             @unique
  type             String
  isSystem         Boolean            @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  PresetPackUpload PresetPackUpload[]
  PresetRequest    PresetRequest[]
  PresetUpload     PresetUpload[]
}

model Notification {
  id        String   @id
  userId    String
  type      String
  message   String
  metadata  Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model Order {
  id                    String      @id
  userId                String
  amount                Float
  status                String
  createdAt             DateTime    @default(now())
  updatedAt             DateTime
  stripePaymentIntentId String?     @unique
  stripeSessionId       String?     @unique
  User                  User        @relation(fields: [userId], references: [id])
  OrderItem             OrderItem[]

  @@index([userId])
}

model OrderItem {
  id        String   @id
  orderId   String
  presetId  String?
  sampleId  String?
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime
  Order     Order    @relation(fields: [orderId], references: [id])
}

model PackPresets {
  presetId         String
  packId           String
  addedAt          DateTime         @default(now())
  PresetPackUpload PresetPackUpload @relation(fields: [packId], references: [id])
  PresetUpload     PresetUpload     @relation(fields: [presetId], references: [id])

  @@id([presetId, packId])
  @@index([packId])
  @@index([presetId])
}

model PresetDownload {
  id              String       @id
  userId          String
  createdAt       DateTime     @default(now())
  presetId        String
  amount          Float
  stripeSessionId String?      @unique
  PresetUpload    PresetUpload @relation(fields: [presetId], references: [id])
  User            User         @relation(fields: [userId], references: [id])

  @@unique([userId, presetId])
  @@index([createdAt])
  @@index([userId])
}

model PresetPackDownload {
  id               String           @id
  userId           String
  createdAt        DateTime         @default(now())
  packId           String
  amount           Float
  stripeSessionId  String?          @unique
  PresetPackUpload PresetPackUpload @relation(fields: [packId], references: [id])
  User             User             @relation(fields: [userId], references: [id])

  @@unique([userId, packId])
  @@index([createdAt])
  @@index([packId])
  @@index([userId])
}

model PresetPackUpload {
  id                 String               @id
  title              String               @db.VarChar(255)
  description        String?
  priceType          PriceType            @default(FREE)
  price              Float?
  soundPreviewUrl    String?
  tags               String[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  genreId            String?
  userId             String
  vstId              String?
  CartItem           CartItem[]
  PackPresets        PackPresets[]
  PresetPackDownload PresetPackDownload[]
  Genre              Genre?               @relation(fields: [genreId], references: [id])
  User               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  vst                VST?                 @relation(fields: [vstId], references: [id])
  PriceHistory       PriceHistory[]
  WishlistItem       WishlistItem[]

  @@index([createdAt])
  @@index([genreId])
  @@index([vstId])
}

model PresetRequest {
  id               String             @id
  title            String
  youtubeLink      String?
  genreId          String?
  enquiryDetails   String
  status           RequestStatus      @default(OPEN)
  userId           String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  tags             String[]
  Genre            Genre?             @relation(fields: [genreId], references: [id])
  User             User               @relation(fields: [userId], references: [id])
  PresetSubmission PresetSubmission[]
  PresetUpload     PresetUpload[]

  @@index([genreId])
  @@index([userId])
}

model PresetSubmission {
  id              String        @id
  presetRequestId String
  userId          String
  title           String
  soundPreviewUrl String?
  presetFileUrl   String?
  guide           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  tags            String[]
  presetType      PresetType    @default(LEAD)
  price           Float?
  priceType       PriceType     @default(FREE)
  vstId           String?
  vstType         VstType       @default(SYNTH)
  PresetRequest   PresetRequest @relation(fields: [presetRequestId], references: [id])
  User            User          @relation(fields: [userId], references: [id])
  vst               VST?          @relation(fields: [vstId], references: [id])

  @@index([presetRequestId])
  @@index([userId])
  @@index([vstId])
}

model PresetUpload {
  id                String           @id
  title             String           @db.VarChar(255)
  description       String?
  presetType        PresetType       @default(LEAD)
  soundPreviewUrl   String?
  presetFileUrl     String?
  spotifyLink       String?
  genreId           String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime
  presetRequestId   String?
  vstId             String?
  guide             String?
  tags              String[]
  originalFileName  String?
  quantity          Int              @default(1)
  priceType         PriceType        @default(FREE)
  userId            String
  price             Float?
  stripeProductId   String?          @unique
  itemType          ItemType         @default(PRESET)
  referenceTrackUrl String?
  CartItem          CartItem[]
  PackPresets       PackPresets[]
  PresetDownload    PresetDownload[]
  Genre             Genre?           @relation(fields: [genreId], references: [id])
  User              User             @relation(fields: [userId], references: [id])
  vst               VST?             @relation(fields: [vstId], references: [id])
  PriceHistory      PriceHistory[]
  WishlistItem      WishlistItem[]
  PresetRequest     PresetRequest[]

  @@index([createdAt])
  @@index([genreId])
  @@index([vstId])
}

model PriceHistory {
  id               String            @id
  price            Decimal
  timestamp        DateTime          @default(now())
  presetId         String?
  packId           String?
  cartItemId       String?
  CartItem         CartItem?         @relation(fields: [cartItemId], references: [id])
  PresetPackUpload PresetPackUpload? @relation(fields: [packId], references: [id])
  PresetUpload     PresetUpload?     @relation(fields: [presetId], references: [id])

  @@index([cartItemId])
  @@index([packId])
  @@index([presetId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tutorial {
  id              String   @id
  title           String
  description     String
  url             String
  soundPreviewUrl String
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  userId          String
  User            User     @relation(fields: [userId], references: [id])
}

model User {
  id                  String               @id
  name                String?
  username            String?              @unique
  email               String               @unique
  emailVerified       DateTime?
  image               String?              @unique
  websiteUrl          String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime
  stripeAccountId     String?              @unique
  lemonSqueezyStoreId String?              @unique
  spotifyAccessToken  String?
  spotifyRefreshToken String?
  spotifyState       String?
  Account             Account[]
  Cart                Cart[]
  Order               Order[]
  PresetDownload      PresetDownload[]
  PresetPackDownload  PresetPackDownload[]
  PresetPackUpload    PresetPackUpload[]
  PresetRequest       PresetRequest[]
  PresetSubmission    PresetSubmission[]
  PresetUpload        PresetUpload[]
  Session             Session[]
  Tutorial            Tutorial[]
  Wishlist            Wishlist?
}

model VST {
  id               String             @id
  name             String             @unique
  type             VstType
  updatedAt        DateTime           @updatedAt
  PresetPackUpload PresetPackUpload[]
  PresetSubmission PresetSubmission[]
  PresetUpload     PresetUpload[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Wishlist {
  id           String         @id
  userId       String         @unique
  priceAlerts  Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  User         User           @relation(fields: [userId], references: [id])
  WishlistItem WishlistItem[]
}

model WishlistItem {
  id               String            @id
  quantity         Int               @default(1)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
  wishlistId       String
  presetId         String?
  packId           String?
  itemType         ItemType
  PresetPackUpload PresetPackUpload? @relation(fields: [packId], references: [id])
  PresetUpload     PresetUpload?     @relation(fields: [presetId], references: [id])
  Wishlist         Wishlist          @relation(fields: [wishlistId], references: [id])

  @@unique([wishlistId, presetId, packId])
  @@index([packId])
  @@index([presetId])
  @@index([wishlistId])
}

enum CartType {
  CART
  WISHLIST
}

enum GenreType {
  SYSTEM
  CUSTOM
}

enum ItemType {
  PRESET
  PACK
  REQUEST
}

enum PresetType {
  PAD
  LEAD
  PLUCK
  BASS
  FX
  OTHER
}

enum PriceType {
  FREE
  PREMIUM
}

enum RequestStatus {
  OPEN
  SATISFIED
}

enum VstType {
  SYNTH
}
